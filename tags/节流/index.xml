<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>节流 on CANTATAS</title>
    <link>https://html6.club/tags/%E8%8A%82%E6%B5%81/</link>
    <description>Recent content in 节流 on CANTATAS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2019. All rights reserved.</copyright>
    <lastBuildDate>Sun, 15 Jul 2018 14:02:44 +0800</lastBuildDate>
    
	<atom:link href="https://html6.club/tags/%E8%8A%82%E6%B5%81/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>什么是防抖和节流？有什么区别？如何实现？</title>
      <link>https://html6.club/post/debounce-and-throttle/</link>
      <pubDate>Sun, 15 Jul 2018 14:02:44 +0800</pubDate>
      
      <guid>https://html6.club/post/debounce-and-throttle/</guid>
      <description>防抖  触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间
 思路：  每次触发事件时都取消之前的延时调用方法
 function debounce(fn) { let timeout = null; // 创建一个标记用来存放定时器的返回值 return function () { clearTimeout(timeout); // 每当用户输入的时候把前一个 setTimeout clear 掉 timeout = setTimeout(() =&amp;gt; { // 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数 fn.apply(this, arguments); }, 500); }; } function sayHi() { console.log(&#39;防抖成功&#39;); } var inp = document.getElementById(&#39;inp&#39;); inp.addEventListener(&#39;input&#39;, debounce(sayHi)); // 防抖  节流  高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率
 思路：  每次触发事件时都判断当前是否有等待执行的延时函数
 function throttle(fn) { let canRun = true; // 通过闭包保存一个标记 return function () { if (!</description>
    </item>
    
  </channel>
</rss>