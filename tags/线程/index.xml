<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>线程 on CANTATAS</title>
    <link>https://html6.club/tags/%E7%BA%BF%E7%A8%8B/</link>
    <description>Recent content in 线程 on CANTATAS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2019. All rights reserved.</copyright>
    <lastBuildDate>Mon, 05 Mar 2018 10:41:43 +0800</lastBuildDate>
    
	<atom:link href="https://html6.club/tags/%E7%BA%BF%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript引擎与线程</title>
      <link>https://html6.club/post/js-engines-and-threads/</link>
      <pubDate>Mon, 05 Mar 2018 10:41:43 +0800</pubDate>
      
      <guid>https://html6.club/post/js-engines-and-threads/</guid>
      <description>聊聊 JavaScript 的单线程与异步，浏览器的多线程、引擎和内核。 如果你做过可视化开发，你是否遇到过这样一个棘手的问题：因为需要向页面中添加大量的图表或点线元素而导致页面卡顿、性能下降。一般来说你可能考虑一个方案，从 SVG 换到了 canvas，这或多或少可以解决你面临的痛点，但是背后的原因你到底了解多少？隐藏在浏览器背后的秘密到底有多少，内核和引擎我们又该了解到什么程度？换个方面来说，我们都知道 JavaScript 是单线程的，那么 HTML5 规范引入了一个叫 Web Worker 的标准是否意味着 JavaScript 真正跨入多线程编程的时代了呢？
今天在看《深入 HTML5 Web Worker 应用实践：多线程编程》一文时发现自己对 JavaScript 解释器和浏览器的线程机制理解的不是特别透彻，很容易混淆浏览器多线程机制并错误认为由于 Web Worker 的设计使得 JavaScript 拥有了多线程的能力。事后搜了不少资料进行学习，整理成此文，主要介绍浏览器的各个引擎、线程间的工作机制以及 JavaScript 单线程的一些事。
浏览器的那些引擎与内核 因为要谈到 JavaScript 的实现，必须先了解它的宿主环境，我们就从宿主环境之一——浏览器开始说起吧。
浏览器的主要功能是向服务器发送请求，在自身窗口中展示我们所选择的网络资源。一个浏览器的主要组件可分为如下几个部分：
 用户界面(User Interface) - 包括地址栏、前进/后退按钮、书签菜单等。除了浏览器主窗口显示的您请求的页面外，其他显示的各个部分都属于用户界面。 浏览器引擎(Browser engine) - 在用户界面和呈现引擎之间传送指令。 呈现引擎(Rendering engine) - 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。 网络(Networking) - 用于网络调用，比如 HTTP 请求。其接口与平台无关，并为所有平台提供底层实现。 用户界面后端(UI Backend) - 用于绘制基本的窗口小部件，比如组合框和窗口。其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。 JavaScript 解释器(JavaScript Interpreter)。用于解析和执行 JavaScript 代码。 数据存储(Data Persistence)。这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“网络数据库”，这是一个完整（但是轻便）的浏览器内数据库。  注意：和大多数浏览器不同，Chrome 浏览器的每个标签页都分别对应一个呈现引擎实例。每个标签页都是一个独立的进程。</description>
    </item>
    
  </channel>
</rss>